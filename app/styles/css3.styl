@import "base";

//TODO:
//UI/Animation lib
//https://github.com/h5bp/Effeckt.css
//http://topcoat.io/topcoat/

//https://github.com/twbs/bootstrap/blob/master/dist/css/bootstrap.css
//http://getbootstrap.com/css/
//http://getbootstrap.com/components/
//https://github.com/yidea/bootstrap-stylus

/*
 * @ CSS Code Style
 * ----------------------------------
 * -CSS Code Style guide:
  http://mdo.github.io/code-guide/
  https://github.com/necolas/idiomatic-css
  https://github.com/styleguide/css
 */

/* @ CSS ORG
* -------------
# OOCSS
http://nicolasgallagher.com/about-html-semantics-front-end-architecture/
- class based, low nesting (<3)
# How to org css in large project like modules(e.g. Bootstrap)
https://github.com/twbs/bootstrap/tree/master/less
# CSS code style
position + box model(MBPW) + visual
* */

/* @ CSS-Preprocessor
* -------------
- http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412
- reusable, configable, programmable css (grid system, vendor fix, media query)
# Sass + Compass
Good: popular community, more dev tool support
Bad: ruby gem, not close to native css, need @include mixin().e.g  @include display-box;
@mixin border-radius($n) {}
Cheatsheet: http://www.jc-designs.net/pdf/sassCheat.pdf

# Stylus + Nib
Good: nodejs based, native css extend e.g. border-radius:0; will autogen vendor prefix, & to reference context, @height
Bad: lack css sprite tool, lack support in dev tool, lower usage
border-radius(){}
*/


/* @ Normalize.css vs. Reset.css
* -------------
https://github.com/necolas/normalize.css/blob/master/normalize.css
Normalize keep things original as browser default stylesheet, e.g. no override/clear on ul, input border
* */


/* @ Box model
* -------------
* MBPWH
* CSS specificity
* PDF (position vs. display vs. float) - foundation of layout
http://www.w3.org/TR/CSS2/visuren.html#dis-pos-flo
* */

/* @ Box-sizing
* -------------
http://css-tricks.com/box-sizing/
- IE 8+
- border-box: contentWidth = width-padding-border (margin is excluded)
- content-box
*/
* {
  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
  -moz-box-sizing: border-box;    /* Firefox, other Gecko */
  box-sizing: border-box;         /* Opera/IE 8+ */
}


/* @ Position
* -------------
1 static
2 relative
3 absolute
*/


/* @ Display
* -------------
0 none
1 inline
2 inline-block
3 block

CodePen: http://codepen.io/yidea/pen/BAaoK

1 none
- hide element, e.g <title>,<script>, without layout&rendering html. visibility: hiden will still layout/take the space

2 block
<div>
3 inline-block
4 inline
<span>, <input>, <img>
5 table-cell
6 flex
7+. grid, list-item, table
*/


/* @ Float
* -------------
Float vs. inline-block+vertical-align:top for horizontal navigation layout
- Clearfix
Elements following a floated element will wrap around the floated element
clear:both;
.clearfix:after {content:""; }
- Display:block
When you float an element it becomes a block box (no longer part of inline layout flow). so when float: left/right, no need to set display, it's always set to display:block
- Width
Don't forget set width on floated item and it's still in the normal doc flow, otherwise it will shrink to the widest child element (but might be unpredicatable)

Tutorial
http://www.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/
*/


/* @ IE hack & haslayout
* -------------
zoom: 1 trigger haslayout
*, _ if

- IE 7 scaling image improvement
img { -ms-interpolation-mode: bicubic; }

http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
* */


//@ Negative margin
//http://coding.smashingmagazine.com/2009/07/27/the-definitive-guide-to-using-negative-margins/
.test {
  //# Negative margin on static element
  // Negative margin-left/top will move the element left/top
  margin-left: -10px;
  margin-top: -10px;
  // Negative margin-bottom/right will not move the element but will pulls succeeding elements into itself(overlapping)
  margin-bottom: -10px;
  margin-right: -10px;
  // Negative margin w floated elements will make them overlap each other
  // Negative margin w float sometime might cause links unclickable, use position:relative to solve
}


/* @ Stacking order & Z-index
-----------------------------
http://timkadlec.com/2008/01/detailed-look-at-stacking-in-css/
set z-index=0 will establish a new stacking context layer 0 for the item and its inside the element

# Stacking order rules (0 is on top)

0 Positioned elements with z-index of greater than 0, first in order of z-index from lowest to highest, then in order of appearance in source code
1 Positioned elements without z-index specified, in order of appearance in source code
2 Inline elements
3 Floating elements which is Non-positioned, in order of appearance in source code
4 All non-positioned, non-floating, block elements in order of source code (last in on top)
5 Root element(body) backgrounds and borders
*/


/*
 * @ Pseudo-classes
 * ----------------------------------
 * https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
 * - li:nth-child(n) //ie9+
 http://css-tricks.com/useful-nth-child-recipies/
 */


/* @ Media Query & Resposive design
-----------------------------------
*/
//breakpoint small screen 800px
@media screen and (max-width: 800px) {
  .navigation {
    justify-content: center;
  }
}

/* @ Accessiblily & WAI ARIA
-----------------------------------
http://dev.opera.com/articles/view/introduction-to-wai-aria/
*/


/* ==========================================================================
   CSS Layout
   ========================================================================== */
/*
 * @ Center content vertically and horizontally
 * ----------------------------------
 * - Codepen: http://codepen.io/yidea/pen/dyFml/
 * - Methods: position absolute(know child width/height), table-cell+vertical-align:middle; Ghost element method(inline-block+vertical-algin); flexbox; css-translate
 * How vertical-algin works http://phrogz.net/css/vertical-align/
 */

/*
 * @ Column
 * ----------------------------------
 * - float: left + parent width
 * - inline-block + parent width
 * - position: absolute + left
 * - display: table; display: table-cell
 */

/*
 * @ Holy Grail layout
 * ----------------------------------
 * - Codepen: http://codepen.io/yidea/pen/JhEbB
 * - Method: float; flexbox
 */

/*
 * @ Input/button layout
 * ----------------------------------
 * - search bar, dropdown 2/3 column layout
 */

/*
 * @ Tile layout
 * ----------------------------------
 * - photos, products
 */


/* @ Flexbox
-----------------------------
http://weblog.bocoup.com/dive-into-flexbox/
http://css-tricks.com/snippets/css/a-guide-to-flexbox/
- A new box model (flexible box layout)- for easier different device UI layout (3+ column, center vertically/horizontally). A flex container expands items to fill available free space, or shrinks them to prevent overflow.
- IE 10+
- Playground: http://the-echoplex.net/flexyboxes/
- Codepen: http://codepen.io/yidea/pen/Chgju
*/

// @ Masonry Pinterest layout
//http://www.sitepoint.com/understanding-masonry-layout/


// @ Grid layout system (fluid design)
//http://codepen.io/marcolago/pen/lqGFb
//http://css-tricks.com/almanac/properties/g/grid/

// @ how many ways u have to create a 3 column layout
// float, inline-block, table-cell?, column, flexbox, absolute (there pros and cons)

// @ calc()
//Codepen http://codepen.io/yidea/pen/tkaFs

//ellipsy word


/*
 * @ vertical-align
 * ----------------------------------
 http://phrogz.net/CSS/vertical-align/
 * - when display: table-cell; (IE7+) vertical-align will work as expected on top/middle/bottom
 * - when display: inline/inline-block; vertical-align work based on the previous inline element position (e.g. Ghost align method)
 */

/*
 * @ Overflow & text-overflow: ellipsis/clip
 * ----------------------------------
 * - Codepen: http://codepen.io/yidea/pen/yhCvm/?editors=110
 */


/*
 * @ :before, :after
 * ----------------------------------
 http://css-tricks.com/pseudo-element-roundup/
 * - UI aiding, clearfix, center algin ghost method
 */

/* ==========================================================================
   Responsive Design & Media Query
   ========================================================================== */
/*
 * @ Responsive Image
 * ----------------------------------
 * http://nicolasgallagher.com/flexible-css-cover-images/
 * - prevent zoom on mobile device
 <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
 */
// max-width: 100% will make image fluid and prevent from exceeding the width of its container (IE8+), for IE6,7 use width:100%
img { max-width: 100%; } //set max-width:100% will make all image resposive based on the size of its container
/* ipad */
@media only screen and (min-device-width : 768px) and (max-device-width : 1024px) {
  img { max-width: 100%; } //use max-width: 100% to make sure image cannot bleed the fixed width on mobile devices
}

/*
 * @ Fluid & Liquid Layout
 * ----------------------------------
 * - use %, em e.g. 62.5% trick
 */



